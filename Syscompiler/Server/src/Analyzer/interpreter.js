/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var interpreter = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,17],$V3=[1,20],$V4=[1,26],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,18],$Va=[1,21],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[1,25],$Vf=[5,19,20,21,27,28,29,30,31,32,33,36,38,40,43,44,48,50,52],$Vg=[1,53],$Vh=[1,47],$Vi=[1,57],$Vj=[1,58],$Vk=[1,48],$Vl=[1,46],$Vm=[1,49],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,54],$Vr=[1,55],$Vs=[1,62],$Vt=[1,65],$Vu=[1,63],$Vv=[1,64],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[1,82],$VH=[1,83],$VI=[1,84],$VJ=[1,85],$VK=[9,26,35,49,58,59,60,61,62,63,64,65,66,67,68,69,70,71],$VL=[9,25,26],$VM=[2,22],$VN=[26,35],$VO=[9,26,35,49,58,59,64,65,66,67,68,69,70,71],$VP=[9,26,35,49,58,59,60,61,63,64,65,66,67,68,69,70,71],$VQ=[9,26,35,49,64,65,66,67,68,69,70,71],$VR=[9,26,35,49,68,69,70,71],$VS=[1,140],$VT=[1,160],$VU=[1,159],$VV=[38,48,50];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"writeline":7,"variable_declaration":8,"SEMICOLON":9,"variable_assignment":10,"if_statement":11,"for_statement":12,"while_statement":13,"switch_statement":14,"post_increment":15,"post_decrement":16,"functions":17,"func_call":18,"BREAK":19,"CONTINUE":20,"RETURN":21,"e":22,"decl_type":23,"id_list":24,"EQUAL":25,"COMMA":26,"ID":27,"INT":28,"DOUBLE":29,"BOOLEAN":30,"RCHAR":31,"RSTRING":32,"WRLINE":33,"LPAR":34,"RPAR":35,"IF":36,"LCBRACKET":37,"RCBRACKET":38,"ELSE":39,"FOR":40,"for_init_opt":41,"for_update":42,"WHILE":43,"SWITCH":44,"case_list":45,"default":46,"case":47,"CASE":48,"COLON":49,"DEFAULT":50,"params_list":51,"VOID":52,"value_List":53,"PLUSPLUS":54,"MINUSMINUS":55,"pre_increment":56,"pre_decrement":57,"PLUS":58,"MINUS":59,"MULTI":60,"DIV":61,"POT":62,"MOD":63,"GREATERTHAN":64,"GREATEREQUAL":65,"LESSTHAN":66,"LESSEQUAL":67,"EQUALTO":68,"NOTEQUAL":69,"AND":70,"OR":71,"NOT":72,"INTEGER":73,"DOUBLENUM":74,"STRING":75,"CHAR":76,"TRUE":77,"FALSE":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"SEMICOLON",19:"BREAK",20:"CONTINUE",21:"RETURN",25:"EQUAL",26:"COMMA",27:"ID",28:"INT",29:"DOUBLE",30:"BOOLEAN",31:"RCHAR",32:"RSTRING",33:"WRLINE",34:"LPAR",35:"RPAR",36:"IF",37:"LCBRACKET",38:"RCBRACKET",39:"ELSE",40:"FOR",43:"WHILE",44:"SWITCH",48:"CASE",49:"COLON",50:"DEFAULT",52:"VOID",54:"PLUSPLUS",55:"MINUSMINUS",58:"PLUS",59:"MINUS",60:"MULTI",61:"DIV",62:"POT",63:"MOD",64:"GREATERTHAN",65:"GREATEREQUAL",66:"LESSTHAN",67:"LESSEQUAL",68:"EQUALTO",69:"NOTEQUAL",70:"AND",71:"OR",72:"NOT",73:"INTEGER",74:"DOUBLENUM",75:"STRING",76:"CHAR",77:"TRUE",78:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,3],[8,4],[8,2],[24,3],[24,1],[23,1],[23,1],[23,1],[23,1],[23,1],[7,5],[10,3],[11,7],[11,11],[11,9],[12,11],[41,1],[41,1],[42,1],[42,1],[42,1],[13,7],[14,7],[14,8],[14,7],[45,2],[45,1],[47,4],[46,3],[17,8],[17,7],[17,8],[17,7],[51,4],[51,2],[18,4],[18,3],[53,3],[53,1],[15,2],[16,2],[56,2],[57,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,1],[22,1],[22,1],[22,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,3],[22,2],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new ast.default($$[$0-1]); return this.$ 
break;
case 2: case 43:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$ = new Array(); this.$.push($$[$0]);
break;
case 4: case 7: case 8: case 9: case 10: case 36: case 37: case 38: case 67: case 68:
 this.$ = $$[$0]; 
break;
case 5: case 6: case 11: case 12: case 80:
 this.$ = $$[$0-1]; 
break;
case 13: case 89:
this.$ = $$[$0]; 
break;
case 14:
this.$ = $$[$0-1]; 
break;
case 15: case 16:
 this.$ = new Break.default(); 
break;
case 17:
 this.$ = new Return.default(null); 
break;
case 18:
 this.$ = new Return.default($$[$0-1]); 
break;
case 19:
this.$ = new Declaration.default($$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 20:
this.$ = new Declaration.default($$[$0-1],$$[$0],null,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 21: case 55:
this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 22: case 44:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 23:
this.$ = new Type.default(enumType.INTEGER);
break;
case 24:
this.$ = new Type.default(enumType.DOUBLE);
break;
case 25:
this.$ = new Type.default(enumType.BOOLEAN);
break;
case 26:
this.$ = new Type.default(enumType.CHAR);
break;
case 27:
this.$ = new Type.default(enumType.STRING);
break;
case 28:
this.$ = new WriteLine.default($$[$0-2]); 
break;
case 29:
 this.$ = new Assignment.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 30:
 this.$ = new Ifs.default($$[$0-4],$$[$0-1],[],_$[$0-6].first_line,_$[$0-6].last_column); 
break;
case 31:
this.$ = new Ifs.default($$[$0-8],$$[$0-5],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column);
break;
case 32:
this.$ = new Ifs.default($$[$0-6],$$[$0-3],[$$[$0]],_$[$0-8].first_line,_$[$0-8].last_column);
break;
case 33:
 this.$ = new For.default($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column); 
break;
case 34: case 35:
this.$ = $$[$0];
break;
case 39:
 this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 40:
 this.$ = new Switch.default($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 41:
 this.$ = new Switch.default($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 42:
 this.$ = new Switch.default($$[$0-4], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 45:
 this.$ = new Case.default($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].last_column ); 
break;
case 46:
 this.$ = new Case.default(null,$$[$0],_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 47:
 this.$ = new Function.default(SymbolType.FUNCTION,$$[$0-7],$$[$0-6],$$[$0-4],false,$$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 48:
this.$ = new Function.default(SymbolType.FUNCTION,$$[$0-6],$$[$0-5],[],false,$$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column);
break;
case 49:
this.$ = new Function.default(SymbolType.METHOD,$$[$0-7],$$[$0-6],$$[$0-4],true,$$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column);
break;
case 50:
this.$ = new Function.default(SymbolType.METHOD,$$[$0-6],$$[$0-5],[],true,$$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column);
break;
case 51:
this.$ = $$[$0-3]; this.$.push(new Symbol.default(SymbolType.PARAMETER, $$[$0-1], $$[$0], null)); 
break;
case 52:
 this.$ = new Array(); this.$.push(new Symbol.default(SymbolType.PARAMETER, $$[$0-1], $$[$0], null)); 
break;
case 53:
 this.$ = new Call.default($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 54:
 this.$ = new Call.default($$[$0-2],[], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 56:
this.$ = new Array(); this.$.push($$[$0]); 
break;
case 57:
 this.$ = new Assignment.default($$[$0-1],new Sum.default(new Identifier.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column),new Literal.default(1,enumType.INTEGER), _$[$0-1].first_line, _$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column); 
break;
case 58:
 this.$ = new Assignment.default($$[$0-1],new Subtraction.default(new Identifier.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column),new Literal.default(1,enumType.INTEGER), _$[$0-1].first_line, _$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column); 
break;
case 61:
 this.$ = new Sum.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 62:
 this.$ = new Subtraction.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 63:
 this.$ = new Multiplication.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 64:
 this.$ = new Division.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 65:
 this.$ = new Exponentiation.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column);
break;
case 66:
 this.$ = new Modulus.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 71:
 this.$ = new GreaterThan.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 72:
 this.$ = new GreaterEqual.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 73:
 this.$ = new LessThan.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 74:
 this.$ = new LessEqual.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 75:
 this.$ = new EqualTo.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 76:
 this.$ = new NotEqual.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 77:
 this.$ = new And.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 78:
 this.$ = new Or.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 79:
 this.$ = new Not.default($$[$0], _$[$0-1].first_line, _$[$0-1].last_column);
break;
case 81:
 this.$ = new Unary.default($$[$0], _$[$0-1].first_line, _$[$0-1].last_column);
break;
case 82:
 this.$ = new Literal.default(Number($$[$0]),enumType.INTEGER); 
break;
case 83:
 this.$ = new Literal.default(Number($$[$0]),enumType.DOUBLE); 
break;
case 84:
 $$[$0] = $$[$0].slice(1,$$[$0].length-1); this.$ = new Literal.default($$[$0],enumType.STRING); 
break;
case 85:
 $$[$0] = $$[$0].slice(1,$$[$0].length-1); this.$ = new Literal.default($$[$0],enumType.CHAR); 
break;
case 86:
 this.$ = new Identifier.default($$[$0], _$[$0].first_line, _$[$0].last_column); 
break;
case 87:
 this.$ = new Literal.default(true,enumType.BOOLEAN); 
break;
case 88:
 this.$ = new Literal.default(false,enumType.BOOLEAN); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,40:$Vb,43:$Vc,44:$Vd,52:$Ve},{1:[3]},{5:[1,31],6:32,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,40:$Vb,43:$Vc,44:$Vd,52:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),{9:[1,33]},{9:[1,34]},o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),{9:[1,35]},{9:[1,36]},o($Vf,[2,13]),{9:[1,37]},{9:[1,38]},{9:[1,39]},{9:[1,40],15:42,16:43,18:56,22:41,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{34:[1,59]},{24:60,27:[1,61]},{25:$Vs,34:$Vt,54:$Vu,55:$Vv},{34:[1,66]},{34:[1,67]},{34:[1,68]},{34:[1,69]},{27:[1,70]},{27:[2,23]},{27:[2,24]},{27:[2,25]},{27:[2,26]},{27:[2,27]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,17]),{9:[1,71],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ},o($VK,[2,67]),o($VK,[2,68]),o($VK,[2,69]),o($VK,[2,70]),{15:42,16:43,18:56,22:86,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:87,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:88,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},o($VK,[2,82]),o($VK,[2,83]),o($VK,[2,84]),o($VK,[2,85]),o($VK,[2,86],{34:$Vt,54:$Vu,55:$Vv}),o($VK,[2,87]),o($VK,[2,88]),o($VK,[2,89]),{27:[1,89]},{27:[1,90]},{15:42,16:43,18:56,22:91,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{9:[2,20],25:[1,92],26:[1,93]},o($VL,$VM,{34:[1,94]}),{15:42,16:43,18:56,22:95,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},o($VK,[2,57]),o($VK,[2,58]),{15:42,16:43,18:56,22:98,27:$Vg,34:$Vh,35:[1,97],53:96,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:99,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{8:102,10:101,23:104,27:[1,103],28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,41:100},{15:42,16:43,18:56,22:105,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:106,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{34:[1,107]},o($Vf,[2,18]),{15:42,16:43,18:56,22:108,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:109,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:110,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:111,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:112,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:113,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:114,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:115,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:116,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:117,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:118,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:119,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:120,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{15:42,16:43,18:56,22:121,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},o($VK,[2,79]),{35:[1,122],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ},o($VK,[2,81]),o($VK,[2,59]),o($VK,[2,60]),{35:[1,123],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ},{15:42,16:43,18:56,22:124,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{27:[1,125]},{23:128,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,35:[1,127],51:126},o([9,35],[2,29],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ}),{26:[1,130],35:[1,129]},o($VK,[2,54]),o($VN,[2,56],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ}),{35:[1,131],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ},{9:[1,132]},{9:[2,34]},{9:[2,35]},{25:$Vs},{24:60,27:[1,133]},{35:[1,134],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ},{35:[1,135],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ},{23:128,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,35:[1,137],51:136},o($VO,[2,61],{60:$Vy,61:$Vz,62:$VA,63:$VB}),o($VO,[2,62],{60:$Vy,61:$Vz,62:$VA,63:$VB}),o($VP,[2,63],{62:$VA}),o($VP,[2,64],{62:$VA}),o($VP,[2,65],{62:$VA}),o($VP,[2,66],{62:$VA}),o($VQ,[2,71],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB}),o($VQ,[2,72],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB}),o($VQ,[2,73],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB}),o($VQ,[2,74],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB}),o($VR,[2,75],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF}),o($VR,[2,76],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF}),o([9,26,35,49,70,71],[2,77],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH}),o([9,26,35,49,71],[2,78],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI}),o($VK,[2,80]),{9:[1,138]},{9:[2,19],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ},o($VL,[2,21]),{26:$VS,35:[1,139]},{37:[1,141]},{27:[1,142]},o($VK,[2,53]),{15:42,16:43,18:56,22:143,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{37:[1,144]},{15:42,16:43,18:56,22:145,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},o($VL,$VM),{37:[1,146]},{37:[1,147]},{26:$VS,35:[1,148]},{37:[1,149]},o($Vf,[2,28]),{37:[1,150]},{23:151,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8},{4:152,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,40:$Vb,43:$Vc,44:$Vd,52:$Ve},o($VN,[2,52]),o($VN,[2,55],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ}),{4:153,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,40:$Vb,43:$Vc,44:$Vd,52:$Ve},{9:[1,154],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ},{4:155,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,40:$Vb,43:$Vc,44:$Vd,52:$Ve},{45:156,46:157,47:158,48:$VT,50:$VU},{37:[1,161]},{4:162,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,40:$Vb,43:$Vc,44:$Vd,52:$Ve},{4:163,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,40:$Vb,43:$Vc,44:$Vd,52:$Ve},{27:[1,164]},{6:32,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,38:[1,165],40:$Vb,43:$Vc,44:$Vd,52:$Ve},{6:32,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,38:[1,166],40:$Vb,43:$Vc,44:$Vd,52:$Ve},{10:170,15:168,16:169,27:[1,171],42:167},{6:32,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,38:[1,172],40:$Vb,43:$Vc,44:$Vd,52:$Ve},{38:[1,173],46:174,47:175,48:$VT,50:$VU},{38:[1,176]},o($VV,[2,44]),{49:[1,177]},{15:42,16:43,18:56,22:178,27:$Vg,34:$Vh,54:$Vi,55:$Vj,56:44,57:45,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr},{4:179,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,40:$Vb,43:$Vc,44:$Vd,52:$Ve},{6:32,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,38:[1,180],40:$Vb,43:$Vc,44:$Vd,52:$Ve},{6:32,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,38:[1,181],40:$Vb,43:$Vc,44:$Vd,52:$Ve},o($VN,[2,51]),o($Vf,[2,48]),o($Vf,[2,30],{39:[1,182]}),{35:[1,183]},{35:[2,36]},{35:[2,37]},{35:[2,38]},{25:$Vs,54:$Vu,55:$Vv},o($Vf,[2,39]),o($Vf,[2,40]),{38:[1,184]},o($VV,[2,43]),o($Vf,[2,42]),{4:185,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,40:$Vb,43:$Vc,44:$Vd,52:$Ve},{49:[1,186],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ},{6:32,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,38:[1,187],40:$Vb,43:$Vc,44:$Vd,52:$Ve},o($Vf,[2,50]),o($Vf,[2,47]),{11:189,36:$Va,37:[1,188]},{37:[1,190]},o($Vf,[2,41]),{6:32,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,38:[2,46],40:$Vb,43:$Vc,44:$Vd,52:$Ve},{4:191,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,40:$Vb,43:$Vc,44:$Vd,52:$Ve},o($Vf,[2,49]),{4:192,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,40:$Vb,43:$Vc,44:$Vd,52:$Ve},o($Vf,[2,32]),{4:193,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,40:$Vb,43:$Vc,44:$Vd,52:$Ve},o($VV,[2,45],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,23:19,6:32,19:$V0,20:$V1,21:$V2,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,40:$Vb,43:$Vc,44:$Vd,52:$Ve}),{6:32,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,38:[1,194],40:$Vb,43:$Vc,44:$Vd,52:$Ve},{6:32,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:19,27:$V3,28:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,36:$Va,38:[1,195],40:$Vb,43:$Vc,44:$Vd,52:$Ve},o($Vf,[2,31]),o($Vf,[2,33])],
defaultActions: {26:[2,23],27:[2,24],28:[2,25],29:[2,26],30:[2,27],31:[2,1],101:[2,34],102:[2,35],168:[2,36],169:[2,37],170:[2,38]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const ast = require('../Interpreter/Ast/Ast');

    const Type = require('../Interpreter/SymbolTable/Type');
    const {enumType} = require('../Interpreter/SymbolTable/Type');
    const Symbol = require('../Interpreter/SymbolTable/Symbol');
    const {SymbolType} = require('../Interpreter/SymbolTable/Symbol');

    const Division = require('../Interpreter/Expressions/Arithmetic/Division');
    const Multiplication = require('../Interpreter/Expressions/Arithmetic/Multiplication');    
    const Sum = require('../Interpreter/Expressions/Arithmetic/Sum');  
    const Subtraction = require('../Interpreter/Expressions/Arithmetic/Subtraction');
    const Exponentiation = require('../Interpreter/Expressions/Arithmetic/Exponentiation');
    const Unary = require('../Interpreter/Expressions/Arithmetic/Unary');
    const Modulus = require('../Interpreter/Expressions/Arithmetic/Modulus');

    const And = require('../Interpreter/Expressions/Logic/And');
    const Not = require('../Interpreter/Expressions/Logic/Not');
    const Or = require('../Interpreter/Expressions/Logic/Or');

    const EqualTo = require('../Interpreter/Expressions/Relational/EqualTo');
    const GreaterEqual = require('../Interpreter/Expressions/Relational/GreaterEqual');
    const GreaterThan = require('../Interpreter/Expressions/Relational/GreaterThan');
    const LessEqual = require('../Interpreter/Expressions/Relational/LessEqual');
    const LessThan = require('../Interpreter/Expressions/Relational/LessThan');
    const NotEqual = require('../Interpreter/Expressions/Relational/NotEqual');

    const Literal = require('../Interpreter/Expressions/Literal');
    const Identifier = require('../Interpreter/Expressions/Identifier');

    const WriteLine = require('../Interpreter/Instructions/WriteLine');
    const Declaration = require('../Interpreter/Instructions/Declaration');
    const Assignment = require('../Interpreter/Instructions/Assignment');
    const For = require('../Interpreter/Instructions/LoopStatements/For');
    const While = require('../Interpreter/Instructions/LoopStatements/While');

    const Ifs = require('../Interpreter/Instructions/ControlStatements/Ifs');
    const Case = require('../Interpreter/Instructions/ControlStatements/Case');
    const Switch = require('../Interpreter/Instructions/ControlStatements/Switch');

    const Break = require('../Interpreter/Instructions/TransferStatements/Break');
    const Continue = require('../Interpreter/Instructions/TransferStatements/Continue');
    const Return = require('../Interpreter/Instructions/TransferStatements/Return');

    const Function = require('../Interpreter/Instructions/Function');
    const Call = require('../Interpreter/Instructions/Call');



/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Ignoramos los comentarios simples*/ console.log("Reconocio: "+ yy_.yytext+" Comentario"); 
break;
case 1:/*ignorar comentarios con multiples lineas*/ console.log("Reconocio: "+ yy_.yytext+" Comentario multiple");
break;
case 2: console.log("Reconocio : " + yy_.yytext);  return 54 
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 55 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 68 
break;
case 5: console.log("Reconocio : " + yy_.yytext);  return 'DOT' 
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 26 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 9 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 49 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 'LSBRACKET' 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 'RSBRACKET' 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 34 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 35 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 37 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 38 
break;
case 15: console.log("Reconocio : " + yy_.yytext);  return 25 
break;
case 16: console.log("Reconocio : " + yy_.yytext);  return 58 
break;
case 17: console.log("Reconocio : " + yy_.yytext);  return 60 
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 61 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 59 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 63 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 62 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 'PI' 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 'E' 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 67 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 66 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 65 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 64 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 69 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 70 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 71 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 72 
break;
case 32: console.log("Reconocio : " + yy_.yytext);  return 'QMARK' 
break;
case 33: console.log("Reconocio : " + yy_.yytext);  return 'EVALUAR' 
break;
case 34: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 35: console.log("Reconocio : " + yy_.yytext);  return 78 
break;
case 36: console.log("Reconocio : " + yy_.yytext);  return 28 
break;
case 37: console.log("Reconocio : " + yy_.yytext);  return 29 
break;
case 38: console.log("Reconocio : " + yy_.yytext);  return 30 
break;
case 39: console.log("Reconocio : " + yy_.yytext);  return 31 
break;
case 40: console.log("Reconocio : " + yy_.yytext);  return 32 
break;
case 41: console.log("Reconocio : " + yy_.yytext);  return 'NEW' 
break;
case 42: console.log("Reconocio : " + yy_.yytext);  return 'DLIST' 
break;
case 43: console.log("Reconocio : " + yy_.yytext);  return 'APPEND' 
break;
case 44: console.log("Reconocio : " + yy_.yytext);  return 'GETVALUE' 
break;
case 45: console.log("Reconocio : " + yy_.yytext);  return 'SETVALUE' 
break;
case 46: console.log("Reconocio : " + yy_.yytext);  return 36 
break;
case 47: console.log("Reconocio : " + yy_.yytext);  return 39 
break;
case 48: console.log("Reconocio : " + yy_.yytext);  return 44 
break;
case 49: console.log("Reconocio : " + yy_.yytext);  return 48 
break;
case 50: console.log("Reconocio : " + yy_.yytext);  return 50 
break;
case 51: console.log("Reconocio : " + yy_.yytext);  return 43 
break;
case 52: console.log("Reconocio : " + yy_.yytext);  return 40 
break;
case 53: console.log("Reconocio : " + yy_.yytext);  return 'DO' 
break;
case 54: console.log("Reconocio : " + yy_.yytext);  return 19 
break;
case 55: console.log("Reconocio : " + yy_.yytext);  return 20 
break;
case 56: console.log("Reconocio : " + yy_.yytext);  return 21 
break;
case 57: console.log("Reconocio : " + yy_.yytext);  return 52 
break;
case 58: console.log("Reconocio : " + yy_.yytext);  return 33 
break;
case 59: console.log("Reconocio : " + yy_.yytext);  return 'TOLOWER' 
break;
case 60: console.log("Reconocio : " + yy_.yytext);  return 'TOUPPER' 
break;
case 61: console.log("Reconocio : " + yy_.yytext);  return 'LENGTH' 
break;
case 62: console.log("Reconocio : " + yy_.yytext);  return 'TRUNCATE' 
break;
case 63: console.log("Reconocio : " + yy_.yytext);  return 'ROUND' 
break;
case 64: console.log("Reconocio : " + yy_.yytext);  return 'TYPEOF' 
break;
case 65: console.log("Reconocio : " + yy_.yytext);  return 'TOSTRING' 
break;
case 66: console.log("Reconocio : " + yy_.yytext);  return 'TOCHAR' 
break;
case 67: console.log("Reconocio : " + yy_.yytext);  return 'START' 
break;
case 68: console.log("Reconocio : " + yy_.yytext);  return 'WITH' 
break;
case 69: console.log("Reconocio : " + yy_.yytext + " Doble");  return 74 
break;
case 70: console.log("Reconocio : " + yy_.yytext + " Entero");  return 73 
break;
case 71: console.log("Reconocio : " + yy_.yytext+ " Id");  return 27 
break;
case 72: console.log("Reconocio : " + yy_.yytext+ " Cadena");  return 75 
break;
case 73: console.log("Reconocio : " + yy_.yytext+ " Caracter");  return 76 
break;
case 74:/* Espacios se ignoran */
break;
case 75:return 5
break;
case 76:return 'ERROR'
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:=)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:PI\b)/i,/^(?:E\b)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\?)/i,/^(?:evaluar\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:DynamicList\b)/i,/^(?:append\b)/i,/^(?:getValue\b)/i,/^(?:setValue\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:WriteLine\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:(([0-9])+\.([0-9])+))/i,/^(?:((([0-9]))+))/i,/^(?:(([a-zA-ZÑñ]+)(([a-zA-ZÑñ]+)|([0-9])|_)*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]))*")))/i,/^(?:(('((\\([\'\"\\ntr"]))|([^\'\\]))')))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = interpreter;
exports.Parser = interpreter.Parser;
exports.parse = function () { return interpreter.parse.apply(interpreter, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}